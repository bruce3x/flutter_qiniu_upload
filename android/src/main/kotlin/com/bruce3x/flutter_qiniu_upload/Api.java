// Autogenerated from Pigeon (v0.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.bruce3x.flutter_qiniu_upload;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Api {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QiniuUploadResult {
    private String requestId;
    public String getRequestId() { return requestId; }
    public void setRequestId(String setterArg) { this.requestId = setterArg; }

    private QiniuUploadRequest request;
    public QiniuUploadRequest getRequest() { return request; }
    public void setRequest(QiniuUploadRequest setterArg) { this.request = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("requestId", requestId);
      toMapResult.put("request", request);
      return toMapResult;
    }
    static QiniuUploadResult fromMap(HashMap map) {
      QiniuUploadResult fromMapResult = new QiniuUploadResult();
      Object requestId = map.get("requestId");
      fromMapResult.requestId = (String)requestId;
      Object request = map.get("request");
      fromMapResult.request = (QiniuUploadRequest)request;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QiniuUploadRequest {
    private String key;
    public String getKey() { return key; }
    public void setKey(String setterArg) { this.key = setterArg; }

    private String token;
    public String getToken() { return token; }
    public void setToken(String setterArg) { this.token = setterArg; }

    private String file;
    public String getFile() { return file; }
    public void setFile(String setterArg) { this.file = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("key", key);
      toMapResult.put("token", token);
      toMapResult.put("file", file);
      return toMapResult;
    }
    static QiniuUploadRequest fromMap(HashMap map) {
      QiniuUploadRequest fromMapResult = new QiniuUploadRequest();
      Object key = map.get("key");
      fromMapResult.key = (String)key;
      Object token = map.get("token");
      fromMapResult.token = (String)token;
      Object file = map.get("file");
      fromMapResult.file = (String)file;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QiniuTaskUpdate {
    private String requestId;
    public String getRequestId() { return requestId; }
    public void setRequestId(String setterArg) { this.requestId = setterArg; }

    private Double percent;
    public Double getPercent() { return percent; }
    public void setPercent(Double setterArg) { this.percent = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("requestId", requestId);
      toMapResult.put("percent", percent);
      return toMapResult;
    }
    static QiniuTaskUpdate fromMap(HashMap map) {
      QiniuTaskUpdate fromMapResult = new QiniuTaskUpdate();
      Object requestId = map.get("requestId");
      fromMapResult.requestId = (String)requestId;
      Object percent = map.get("percent");
      fromMapResult.percent = (Double)percent;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QiniuTaskComplete {
    private String requestId;
    public String getRequestId() { return requestId; }
    public void setRequestId(String setterArg) { this.requestId = setterArg; }

    private QiniuFile file;
    public QiniuFile getFile() { return file; }
    public void setFile(QiniuFile setterArg) { this.file = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("requestId", requestId);
      toMapResult.put("file", file);
      return toMapResult;
    }
    static QiniuTaskComplete fromMap(HashMap map) {
      QiniuTaskComplete fromMapResult = new QiniuTaskComplete();
      Object requestId = map.get("requestId");
      fromMapResult.requestId = (String)requestId;
      Object file = map.get("file");
      fromMapResult.file = (QiniuFile)file;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class QiniuFile {
    private String hash;
    public String getHash() { return hash; }
    public void setHash(String setterArg) { this.hash = setterArg; }

    private String key;
    public String getKey() { return key; }
    public void setKey(String setterArg) { this.key = setterArg; }

    private String mimeType;
    public String getMimeType() { return mimeType; }
    public void setMimeType(String setterArg) { this.mimeType = setterArg; }

    private Long fileSize;
    public Long getFileSize() { return fileSize; }
    public void setFileSize(Long setterArg) { this.fileSize = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("hash", hash);
      toMapResult.put("key", key);
      toMapResult.put("mimeType", mimeType);
      toMapResult.put("fileSize", fileSize);
      return toMapResult;
    }
    static QiniuFile fromMap(HashMap map) {
      QiniuFile fromMapResult = new QiniuFile();
      Object hash = map.get("hash");
      fromMapResult.hash = (String)hash;
      Object key = map.get("key");
      fromMapResult.key = (String)key;
      Object mimeType = map.get("mimeType");
      fromMapResult.mimeType = (String)mimeType;
      Object fileSize = map.get("fileSize");
      fromMapResult.fileSize = (fileSize == null) ? null : ((fileSize instanceof Integer) ? (Integer)fileSize : (Long)fileSize);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface QiniuHostApi {
    QiniuUploadResult upload(QiniuUploadRequest arg);
    void cancel(QiniuUploadResult arg);

    /** Sets up an instance of `QiniuHostApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, QiniuHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QiniuHostApi.upload", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              QiniuUploadRequest input = QiniuUploadRequest.fromMap((HashMap)message);
              QiniuUploadResult output = api.upload(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QiniuHostApi.cancel", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              QiniuUploadResult input = QiniuUploadResult.fromMap((HashMap)message);
              api.cancel(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class QiniuFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public QiniuFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void taskUpdate(QiniuTaskUpdate argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QiniuFlutterApi.taskUpdate", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
    public void taskComplete(QiniuTaskComplete argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.QiniuFlutterApi.taskComplete", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
